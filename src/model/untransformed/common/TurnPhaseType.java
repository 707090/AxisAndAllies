//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.05.21 at 02:25:32 AM EDT 
//


package model.untransformed.common;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for turn_phase_type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="turn_phase_type"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="Purchase Units"/&gt;
 *     &lt;enumeration value="Combat Move"/&gt;
 *     &lt;enumeration value="Conduct Combat"/&gt;
 *     &lt;enumeration value="Noncombat Move"/&gt;
 *     &lt;enumeration value="Mobilize New Units"/&gt;
 *     &lt;enumeration value="Collect Income"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "turn_phase_type", namespace = "model/untransformed/common")
@XmlEnum
public enum TurnPhaseType {

    @XmlEnumValue("Purchase Units")
    PURCHASE_UNITS("Purchase Units"),
    @XmlEnumValue("Combat Move")
    COMBAT_MOVE("Combat Move"),
    @XmlEnumValue("Conduct Combat")
    CONDUCT_COMBAT("Conduct Combat"),
    @XmlEnumValue("Noncombat Move")
    NONCOMBAT_MOVE("Noncombat Move"),
    @XmlEnumValue("Mobilize New Units")
    MOBILIZE_NEW_UNITS("Mobilize New Units"),
    @XmlEnumValue("Collect Income")
    COLLECT_INCOME("Collect Income");
    private final String value;

    TurnPhaseType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TurnPhaseType fromValue(String v) {
        for (TurnPhaseType c: TurnPhaseType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
